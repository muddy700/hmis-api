
Project Title: Healthcare Management System

Project Deliverable: REST APIs

<===== Tables/Collections =====>
-User
-Role
-Patient 
-Appointment
-Encounter
-Symptoms
-Diagnosis 
-Lab Test Template
-Lab Test
-Medicine
-Sales Invoice
-Mode of Payment 

<===== Embeded Documents =====>
    -Vital Sign (Array)
    -Address (Object)
    -Dispensed Medicine (Array)
    -Sales Item (Array)

<===== Tables/Collections With Properties =====>
-> User:
    -Username
    -First Name
    -Last Name
    -Full Name
    -Date of Birth
    -Email
    -Phone
    -Gender
    -Token
    -Status: ie.. Active/Disabled
    -Password
    -Profile Image
    -Role: {Role Id} 
    -Address: {Address Table}

-> Role:
    -Role Name: ie.. Receiptionist, Cashier, Doctor, Lab Technician, Pharmacy

-> Patient:
    -First Name
    -Last Name
    -Full Name
    -Date of Birth
    -Date registered
    -Email
    -Phone
    -Gender
    -Address: {Address Table}
    -Vital Sign: [{Vital Sign Table}]

-> Vital Sign:
    -Date and Time Taken
    -Taken By/Practitioner: {User Id}
    -Weight
    -Height
    -Body Temperature
    -Blood Pressure

-> Appointment:
    -Date Created
    -Appointment Time
    -Doctor/Practitioner: {User Id}
    -Patient: {Patient Id}
    -Price
    -Status: ie.. open, closed
    -Invoiced: Bool

-> Encounter:
    -Date and Time
    -Reference Appointment: {appointment_id}
    -Doctor/Practitioner: {User Id}
    -Patient: {Patient Id}
    -Status: ie.. Open/Closed
    # CRUD End-point for embedded docs
    -Symptoms: [{Symptoms Table/Ids}]
    -Diagnosis: [{Diagnosis Table/Ids}]
    -Lab Test: [{Lab Test Template Table}]
    -Lab Test Results: [{Lab Test Table}]
    -Final Diagnosis: [{Diagnosis Table/Ids}]
    -Medicine:[{Dispensed Medicine Table}]

-> Lab Test Template:
    -Lab Test Name
    -Price

-> Lab Test:
    -Test Template Id
    -Date and Time
    -Lab Technician: {User Id}
    -Patient: {Patient Id}
    -Encounter: {Encounter Id}
    -Test Result
    -Invoiced
    -Status: ie..completed/In-progress

-> Medicine:
    -Drug Code
    -Drug Name
    -Price
    -Dosage

-> Dispensed Medicine:
    -Drug Id
    -Quantity
    -Grand Price
    -Invoiced

-> Sales Invoice
    -Date Created
    -Due Date
    -Patient/Customer: {Patient Id}
    -Mode of Payment: {Mode of payment Id}
    -Items: [{Sales Item Table}]
    -Total Amount
    -Status: ie.. paid/pending
    -Cashier/Received By: {User Id}

-> Sales Item:
    -Item Collection Name
    -Item Id
    -Item Price @ 1
    -Quantity
    -Grand Price

-> Address:
    -Street
    -City
    -State
    -PostalCode

-> Mode of payment:
    -name

-> Symptoms:
    -name

-> Diagnosis:
    -name

<===== End-Points For Filters =====>
 Get => 
    # -Users by:
        # -role
        # -gender
        # -status

    # Patient by:
        //-gender #Done {User - gender}
        # -dob <, =, >
        //-date registered <, =, > #Done {Patient - dob} 

    # Appointment by:
        //-date created #Done {Patient - dob} 
        # -doctor
        //-patient #Done {Appointment - doctor} 
        //-status #Done {User - status} 
        # -invoiced
    
    # Encounter by:
        //-date #Done {Patient - dob} 
        //-Appointment #Done {Appointment - doctor} 
        //-patient #Done {Appointment - doctor} 
        //-doctor #Done {Appointment - doctor} 
        //status #Done {User - status} 

    # Lab test by:
        //-Template Id #Done {Appointment - doctor}
        //-Date and Time #Done {Patient - dob} 
        //-Lab Technician: {User Id} #Done {Appointment - doctor}
        //-Patient: {Patient Id} #Done {Appointment - doctor}
        //-Encounter: {Encounter Id} #Done {Appointment - doctor}
        //-Invoiced #Done {Appointment - invoiced}
        //-Status: ie..completed/In-progress #Done {User - status} 

    # Sales Invoice by:
        //-Date Created #Done {Patient - dob} 
        //-Due Date #Done {Patient - dob} 
        //-Patient/Customer: {Patient Id} #Done {Appointment - doctor}
        //-Mode of Payment: {Mode of payment Id} #Done {Appointment - doctor}
        //-Status: ie.. paid/pending #Done {User - status} 
        //-Cashier/Received By: {User Id} #Done {Appointment - doctor}

<===== Implementation Steps =====>

# Project Initialization
    -Create Project
    -Install all required dependencies
    -Perform initial project configurations. ie..Import some dependencies required to start/run project like express.
    -Run  project

# Connect project with git
    -Create github repository
    -Link git repo with project
    -Push initial project changes

-Create Users and Roles table (Schema and Model)
-Create API end-points to handle CRUD operations for the above tables
-Test end-points created (unit test) and make some modifications if any
-Stage, commit and push changes made separately/grouped based on features (@feature with its own commit) to github

-Create and handle Authentication and Authorization logics by creating end-points for register, login and logout
-Test Logics Created (unit test) and make some modifications if any
-Stage, commit and push changes made separately/grouped based on features (@feature with its own commit) to github

# Create Schema, Model and API end-points to handle CRUD for independent tables(Collections with no foreign key) as listed below
    -Patient
    -Symptoms
    -Diagnosis 
    -Lab Test Template
    -Mode of payment
    -Medicine
-Test end-points created (unit test) and make some modifications if any
-Stage, commit and push changes made separately/grouped based on features (@feature with its own commit) to github

# Create Schema, Model and API end-points to handle CRUD for dependent tables(Collections with foreign key) as listed below
    -Appointment
    -Sales Invoice
    -Encounter
    -Lab Test
-Test end-points created (unit test) and make some modifications if any
-Stage, commit and push changes made separately/grouped based on features (@feature with its own commit) to github

-Test the whole system APIs (System testing)
-Documenting REST APIs with swagger-ui(if required) or any other Interface Description Language
-Deploy

<===== Project Dependencies =====>
    -express => For handling routes
    -mongooose / mongoDB => For managing database
    -nodemon => For auto-restart server when changes are made
    -jsonwebtoken => For authentication
    -dotenv => For handling configuration Data(configuration environmental variables in .env)
    -bcryptjs => For hashing and comparing passwords
    -aws-sdk => For upload and delete files in aws-bucket
    -multer => For handling multiparty/form-data request-bodies
    -swagger-autogen => For generating swagger.json file of your models
    -swagger-ui-express => For populating data stored in swagger.json into ui

<===== Pending Additional Tasks =====>
# 1. Handle Files in mongoDB
# 2. Hash Passwords and skip them when retrieve users
# 3. Add .env in .gitignore
# 4. Edit user's full-name in schema.pre function not in api routes(post and patch)
# 5. Create logout end-point, by storing token in db
# 5. Add Diagnosis-code ie.. malaria === B53
# 6. Add endpoints to perform CRUD for embedded arrays ie.. in vital-signs
# 7. Add filters endpoints ie.. appointments by patient_id, by practitioner_id
# 8. Add custom header for authenticating requests ie.. request_source : 'react-app'
# 9. Hide token and password in all response from users table
# 10. Allow API-clients to use normal forms other than url-encoded => multipart/form-data
11. Use enum in status ie.. 
    const statusEnum = [
        PENDING = 0,
        CANCELLED = 1,
        COMPLETED = 2,
        CONFIRMED = 3
        ]

<===== System Testing Comments =====>

# 1. Dob entered differs with dob stored by 1 ie.. server time-zone is behind one day only locally
# 2. Automate grand price calculation for medicine in encounter
# 3. In Filters-API, pass parameters in path(query) not in body

<===== Deployment Info =====>

1. APIs: Heroku
        -url: https://hims-apis.herokuapp.com/api/v1/doc/#/

2. GitHub repo: https://github.com/muddy700/hmis-api

3. Files(User-Profile-Image): AWS

4. Database: MongoDB Atlas

5. Authentication Scheme Used:
    -Token Based => JWT
    # -Custom Header

6. Collections/Tables Secured: User and Role APIs

7. Testing Credentials For Secured APIs:
    # -Login first to get a token(Token life-time: 12 hrs)
        - Username: tester
        - Password: 12345678

    # -Custome Header:
        -key: 'request-source-domain'
        -value: 'testing.com'